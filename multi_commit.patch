From a57cd74223f38c04b21caf7fa7635768323c406c Mon Sep 17 00:00:00 2001
From: Yahya <yahyabutt2000@gmail.com>
Date: Tue, 7 Nov 2023 18:51:05 +0500
Subject: [PATCH 1/2] Updated App.tsx

---
 src/App.tsx | 24 +++++++++++++++++++-----
 1 file changed, 19 insertions(+), 5 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..e86c0c3 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +31,30 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if(this.state.showGraph) {
+        return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
+      let x = 0;
+      const interval = setInterval(() =>{
+          DataStreamer.getData((serverResponds: ServerRespond[]) => {
+       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+            this.setState({ 
+                data: serverResponds,
+                showGraph: true,
+            });
+        });
+        x++
+        if (x>100){
+            clearInterval(interval);
+        }
+    }, 100);
   }
 
   /**
-- 
2.41.0


From 45842999186aa5e3513b8ecd790a52fee70cbfca Mon Sep 17 00:00:00 2001
From: Yahya <yahyabutt2000@gmail.com>
Date: Tue, 7 Nov 2023 19:44:08 +0500
Subject: [PATCH 2/2] Task 2 completed

---
 src/Graph.tsx | 35 ++++++++++++++++++++++-------------
 1 file changed, 22 insertions(+), 13 deletions(-)

diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..64545e4 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -31,26 +31,35 @@ class Graph extends Component<IProps, {}> {
   }
 
   componentDidMount() {
-    // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+      const elem  = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+      // Get element to attach the table from the DOM.
+      
+      
 
-    const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
-      timestamp: 'date',
-    };
-
-    if (window.perspective && window.perspective.worker()) {
-      this.table = window.perspective.worker().table(schema);
+      const schema = {
+          stock: 'string',
+          top_ask_price: 'float',
+          top_bid_price: 'float',
+          timestamp: 'date',};
+      if (window.perspective && window.perspective.worker()) {
+          this.table = window.perspective.worker().table(schema);
     }
-    if (this.table) {
+      if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
 
       // Add more Perspective configurations here.
       elem.load(this.table);
     }
+  
+
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stocks"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates', '{"stock": "distinct count", "top_ask_price": "avg", "top_bid_price": "avg", "timestamp": "distinct count"}');
   }
+  
+
 
   componentDidUpdate() {
     // Everytime the data props is updated, insert the data into Perspective table
-- 
2.41.0

